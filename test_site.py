#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ CoFound IT —Å Playwright"""
import time
from playwright.sync_api import sync_playwright

def test_site():
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()
        
        print("üåê –û—Ç–∫—Ä—ã–≤–∞—é http://localhost:9000/index.html...")
        try:
            page.goto("http://localhost:9000/index.html", wait_until="networkidle", timeout=5000)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            browser.close()
            return
        
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = page.title()
        print(f"üìù Title: {title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —ç–ª–µ–º–µ–Ω—Ç—ã...")
        
        # Hero section
        hero = page.locator(".hero h1")
        if hero.count() > 0:
            print(f"‚úÖ Hero –∑–∞–≥–æ–ª–æ–≤–æ–∫: {hero.inner_text()[:50]}...")
        else:
            print("‚ùå Hero –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Brand
        brand = page.locator(".brand")
        if brand.count() > 0:
            print(f"‚úÖ –õ–æ–≥–æ—Ç–∏–ø: {brand.inner_text()}")
        else:
            print("‚ùå –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Cards
        cards = page.locator(".card")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {cards.count()}")
        
        # Metrics
        metrics = page.locator(".metric")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç—Ä–∏–∫: {metrics.count()}")
        
        # Buttons
        buttons = page.locator(".btn")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {buttons.count()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS
        print("\nüé® –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∏–ª–∏...")
        hero_bg = page.locator(".hero").evaluate("el => window.getComputedStyle(el).background")
        print(f"‚úÖ Hero background: {hero_bg[:80]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        print("\nüßÆ –¢–µ—Å—Ç–∏—Ä—É—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä...")
        salary_input = page.locator("#salary")
        if salary_input.count() > 0:
            salary_input.fill("300000")
            page.wait_for_timeout(500)
            total = page.locator("#total").inner_text()
            print(f"‚úÖ –†–∞—Å—á–µ—Ç –¥–ª—è 300–∫: {total}")
        
        # –°–∫—Ä–æ–ª–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–π
        print("\nüìú –°–∫—Ä–æ–ª–ª—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        page.evaluate("window.scrollTo(0, 500)")
        time.sleep(1)
        page.evaluate("window.scrollTo(0, 1000)")
        time.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
        print("\nüñ±Ô∏è  –ü—Ä–æ–≤–µ—Ä—è—é hover —ç—Ñ—Ñ–µ–∫—Ç—ã...")
        if cards.count() > 0:
            cards.first.hover()
            time.sleep(0.5)
            print("‚úÖ Hover –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –°–∫—Ä–∏–Ω—à–æ—Ç
        print("\nüì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        page.screenshot(path="screenshot.png", full_page=True)
        print("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: screenshot.png")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏
        print("\nüêõ –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Å–æ–ª—å...")
        errors = []
        page.on("console", lambda msg: errors.append(msg) if msg.type == "error" else None)
        page.reload()
        time.sleep(2)
        
        if errors:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏: {len(errors)}")
            for err in errors[:5]:
                print(f"  - {err}")
        else:
            print("‚úÖ –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ—Ç!")
        
        print("\n‚è≥ –î–µ—Ä–∂—É –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        
        browser.close()
        print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_site()
